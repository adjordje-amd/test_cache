name: rocprofiler-systems Debian (GCC, Python, ROCm)
run-name: debian

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  ROCPROFSYS_CI: ON
  ROCPROFSYS_TMPDIR: "%env{PWD}%/testing-tmp"

jobs:
  debian:
    runs-on: ubuntu-latest
    container:
      image: dgaliffiamd/rocprofiler-systems:ci-base-debian-${{ matrix.os-release }}
    strategy:
      fail-fast: false
      matrix:
        compiler: ['g++']
        python: ['ON']
        build-type: ['Release']
        build-dyninst: ['ON']
        os-release: ['12']
        rocm-version: ['6.4', '7.0']
    env:
      OMPI_ALLOW_RUN_AS_ROOT: 1
      OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
      ROCPROFSYS_CI: 'ON'

    steps:
    - uses: actions/checkout@v4
      with:
        repository: ROCm/rocm-systems
        sparse-checkout: projects/rocprofiler-systems/

    - name: Install Packages
      timeout-minutes: 25
      uses: nick-fields/retry@v3
      with:
        retry_wait_seconds: 30
        timeout_minutes: 25
        max_attempts: 5
        command: |
          apt-get update &&
          apt-get upgrade -y &&
          apt-get install -y libomp-dev libopenmpi-dev openmpi-bin

    - name: Install ROCm Packages
      if: ${{ matrix.rocm-version > 0 }}
      timeout-minutes: 115
      shell: bash
      working-directory: projects/rocprofiler-systems/
      run: |
        ROCM_VERSION=${{ matrix.rocm-version }}
        ROCM_MAJOR=$(echo ${ROCM_VERSION} | sed 's/\./ /g' | awk '{print $1}')
        ROCM_MINOR=$(echo ${ROCM_VERSION} | sed 's/\./ /g' | awk '{print $2}')
        ROCM_VERSN=$(( (${ROCM_MAJOR}*10000)+(${ROCM_MINOR}*100) ))
        echo "ROCM_MAJOR=${ROCM_MAJOR} ROCM_MINOR=${ROCM_MINOR} ROCM_VERSN=${ROCM_VERSN}"
        wget -q https://repo.radeon.com/amdgpu-install/${{ matrix.rocm-version }}/ubuntu/jammy/amdgpu-install_${ROCM_MAJOR}.${ROCM_MINOR}.${ROCM_VERSN}-1_all.deb
        apt-get install -y ./amdgpu-install_${ROCM_MAJOR}.${ROCM_MINOR}.${ROCM_VERSN}-1_all.deb
        apt-get update
        apt-get install -y rocm-dev rocdecode-dev libavformat-dev libavcodec-dev

    - name: Configure, Build and Test
      timeout-minutes: 115
      shell: bash
      working-directory: projects/rocprofiler-systems/
      env:
        GIT_DISCOVERY_ACROSS_FILESYSTEM: 1
      run: |
        git config --global --add safe.directory ${GITHUB_WORKSPACE} &&
        git config --global --add safe.directory ${PWD}
        echo "CMake version: $(cmake --version | head -n 1)"
        echo "Compiler version: $(${{ matrix.compiler }} --version | head -n 1)"
        echo "ROCm version: ${{ matrix.rocm-version }}"
        USE_ROCM=OFF
        if [ "${{ matrix.rocm-version }}" != "0.0" ]; then
          CMAKE_PREFIX_PATH_ARG="-DCMAKE_PREFIX_PATH=/opt/rocm"
          USE_ROCM=ON
        else
          CMAKE_PREFIX_PATH_ARG=""
        fi
        TAG=""
        python3 ./scripts/run-ci.py -B build \
          --name ${{ github.repository_owner }}-${{ github.ref_name }}-debian-${{matrix.os-release}}-${{ matrix.compiler }}${TAG} \
          --build-jobs 2 \
          --site GitHub \
          -- \
          -DCMAKE_C_COMPILER=$(echo '${{ matrix.compiler }}' | sed 's/+/c/g') \
          -DCMAKE_CXX_COMPILER=${{ matrix.compiler }} \
          -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
          -DCMAKE_INSTALL_PREFIX=/opt/rocprofiler-systems \
          -DROCPROFSYS_BUILD_TESTING=ON \
          -DROCPROFSYS_USE_ROCM=$USE_ROCM \
          -DROCPROFSYS_USE_PYTHON=ON \
          -DROCPROFSYS_BUILD_DYNINST=${{ matrix.build-dyninst }} \
          -DROCPROFSYS_BUILD_BOOST=${{ matrix.build-dyninst }} \
          -DROCPROFSYS_BUILD_TBB=${{ matrix.build-dyninst }} \
          -DROCPROFSYS_BUILD_ELFUTILS=${{ matrix.build-dyninst }} \
          -DROCPROFSYS_BUILD_LIBIBERTY=${{ matrix.build-dyninst }} \
          -DROCPROFSYS_PYTHON_PREFIX=/opt/conda/envs \
          -DROCPROFSYS_PYTHON_ENVS="py3.8;py3.9;py3.10;py3.11;py3.12;py3.13" \
          -DROCPROFSYS_MAX_THREADS=64 \
          -DROCPROFSYS_DISABLE_EXAMPLES="transpose;rccl;openmp-target;openmp-vv-offload" \
          -DROCPROFSYS_BUILD_NUMBER=1 \
          -DUSE_CLANG_OMP=OFF \
          $CMAKE_PREFIX_PATH_ARG \
          -- \
          -LE "transpose|rccl|videodecode|jpegdecode|network"
